# CircleCI configuration file
version: 2.1
​
orbs:
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate
​
​
references:
  install_helm: &install_helm
    run:
      name: Install helm v3
      command: |
        wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
        tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
        mv linux-amd64/helm /usr/local/bin/helm
​
jobs:
  build:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build-image:
          push-image: true
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
​
  lint:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            python3.11 -m venv env --prompt=\(linting\)
​
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-linting.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install -r requirements/generated/requirements-linting.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-linting.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with Flake8
          command: |
            source env/bin/activate
            flake8
      - run:
          name: Lint with Black
          command: |
            source env/bin/activate
            black .
​
  unit_test:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            python3.11 -m venv env --prompt=\(unit_test\)
​
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install -r requirements/generated/requirements.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run Unit Tests
          environment:
            TESTING_MODE: "True"
          command: |
            source env/bin/activate
            pytest
​
workflows:
  test_and_build:
    jobs:
      - lint
      - unit_test
      - build:
          context: laa-govuk-notify-orchestrator