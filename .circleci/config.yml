# CircleCI configuration file
version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

executors:
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1

references:
  install_helm: &install_helm
    run:
      name: Install helm v3
      command: |
        wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
        tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
        mv linux-amd64/helm /usr/local/bin/helm

jobs:
  build:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run:
          name: Authenticate with AWS ECR
          command: aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build-image:
          push-image: true
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var

  image_security_scan:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run:
          name: Create target tags
          command: echo "export ECR_DEPLOY_IMAGE=$ECR_REPOSITORY:$CIRCLE_SHA1" >> $BASH_ENV
      - run:
          name: Authenticate with AWS ECR
          command: aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com

      - run:
          name: Install trivy
          command: |
            sudo apt-get update
            sudo apt-get install -y curl wget
            VERSION=$(
                curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
                grep '"tag_name":' | \
                sed -E 's/.*"v([^"]+)".*/\1/'
            )

            wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin
      - run:
          name: Pull down image
          command: |
            docker pull ${ECR_DEPLOY_IMAGE}
      - run:
          name: Scan for vulnerabilities (informative, non-breaking)
          command: |
            trivy image --exit-code 0 --severity UNKNOWN,LOW,MEDIUM,HIGH --no-progress ${ECR_DEPLOY_IMAGE}
      - run:
          name: Scan for breaking vulnerabilities
          command: |
            trivy image --exit-code 1 --severity CRITICAL --no-progress ${ECR_DEPLOY_IMAGE}

  lint:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            python3.11 -m venv env --prompt=\(linting\)

      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-linting.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install -r requirements/generated/requirements-linting.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-linting.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with Flake8
          command: |
            source env/bin/activate
            flake8
      - run:
          name: Lint with Black
          command: |
            source env/bin/activate
            black .

  unit_test:
    docker:
      - image: cimg/python:3.11
    environment:
      TESTING_MODE: "True"
    resource_class: small
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            python3.11 -m venv env --prompt=\(unit_test\)

      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install -r requirements/generated/requirements.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run Unit Tests
          command: |
            source env/bin/activate
            pytest

  deploy:
    parameters:
      namespace:
        type: string
      dynamic_hostname:
        type: boolean
    executor: cloud-platform-executor
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - *install_helm
      - run:
          name: Authenticate with cluster
          command: |
            .circleci/authenticate_with_kubernetes_cluster
      - run:
          name: Deploy to << parameters.namespace >>
          command: |
            ./bin/deploy_<< parameters.namespace >>.sh
      - slack/notify:
          message: ':tada: (<< parameters.namespace >>) Deployed branch $CIRCLE_BRANCH'
          title: '$RELEASE_HOST'

workflows:
  test_and_build:
    jobs:
      - lint
      - unit_test
      - build:
          context: laa-govuk-notify-orchestrator
          requires:
            - lint
            - unit_test
      - image_security_scan:
          context: laa-govuk-notify-orchestrator
          requires:
            - build
      - deploy:
          name: development_deploy
          namespace: development
          context:
           - laa-govuk-notify-orchestrator
           - laa-govuk-notify-orchestrator-dev
          requires:
            - build
      - staging_deploy_approval:
          type: approval
          requires:
            - build
      - deploy:
          name: staging_deploy
          namespace: staging
          context:
           - laa-govuk-notify-orchestrator
           - laa-govuk-notify-orchestrator-staging
          requires:
            - staging_deploy_approval
      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy
            - image_security_scan
          filters:
            branches:
              only:
                - main
      - deploy:
          name: production_deploy
          namespace: production
          context:
           - laa-govuk-notify-orchestrator
           - laa-govuk-notify-orchestrator-production
          requires:
            - production_deploy_approval
          filters:
            branches:
              only:
                - main
